delegate void myFunc(int a, string b);

delegate int MyDelegate(int a, int b);

class DelegateTester {
  method int MyMethod(int a, int b) {
    return a + b;
  }

  method static int MyStaticMethod(int a, int b) {
    return a + b;
  }

    method static void MyStatic() {
    MyDelegate openDel = DelegateTester.MyStaticMethod; # Not allowed, can't take a delegate to a static. This will compile however, which is a bug
    auto n = new DelegateTester();
    MyDelegate del = n.MyMethod;

    DelegateTester.TakeDelegate(del); # Can pass a delegate

    #auto autoDel = n.MyMethod; # Can't type infer delegates, as mutliple delegates with same signature could exist
    #DelegateTester.TakeDelegate(n.MyMethod); # Can't create a delegate inline to call a function. Delegate must be explicitly created before
  }

  method void MyInstanceMethod() {
    MyDelegate del = this.MyMethod; # Delegate points to this
    del.Invoke(15, 36); # Invoke calls a delegate
  }

  method static void TakeDelegate(MyDelegate del) {
    del.Invoke(42, 56);
  }


}

class MyClass {
    field int x;

    field int myField;

    constructor() {
        myField = 85;
    }

    method static int Function(int v, int c) {
        return 32;
    }

    method static string Function() {
        return "42";
    }

    method void OtherInstanceFunction() {
    }

    method void InstanceFunction() {
        this.OtherInstanceFunction();
    }

    method entrypoint void MyFunction() {

        int[] myArr = newarr int(56);

        MyClass.Function();

        System::Console.WriteLine(56);

        #void x = MyClass.MyFunction();

        System::Console.WriteLine(56);
        #System::Console.Out.WriteLine("Hello World \nfrom Out!");

        int i = 0;
        while (i < 5) {
            System::Console.WriteLine(i);
            i = i + 1;
        }
        if (i > 5) {
            System::Console.WriteLine("In the if");
        } else {
            System::Console.WriteLine("In the Else");
        }
        System::Console.Write("Finished Loop: ");
        System::Console.WriteLine(i);
        auto a = new MyClass();
        auto b = newarr int(5);
        b[0] = 42;
        a.x = 42;
        System::Console.WriteLine(a.x.ToString());
    }

    method MyClass[] returnArray() {
        return null;
    }

    method int returnInt() {
        return 42;
    }
}
